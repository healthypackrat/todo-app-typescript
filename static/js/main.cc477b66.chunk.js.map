{"version":3,"sources":["action.ts","reducer.ts","store.ts","TodoComponent.tsx","TodoContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoActionType","todoActionCreator","addTodoAction","todo","payload","type","ADD_TODO","initTodoState","todos","reducer","combineReducers","todoState","state","action","concat","store","createStore","props","onTextChange","e","setState","text","currentTarget","value","onClickAddButton","this","style","width","margin","onChange","onClick","map","i","key","React","TodoContainer","addTodo","connect","dispatch","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qMAGYA,E,4GAAAA,K,qBAAAA,M,SAkCCC,EAAwC,I,sCAX5CC,cAAgB,SAACC,GACtB,MAAO,CACLC,QAAS,CACPD,QAEFE,KAAML,EAAeM,Y,yjBCzB3B,IAAMC,EAA4B,CAChCC,MAAO,IA4BMC,EAJsBC,YAAgB,CACnDC,UArBmD,WAGnC,IAFhBC,EAEe,uDAFKL,EACpBM,EACe,uCAEf,OAAQA,EAAOR,MACb,KAAKL,EAAeM,SAGlB,IAAMJ,EAAgCW,EACtC,OAAO,EAAP,GACKD,EADL,CAEEJ,MAAOI,EAAMJ,MAAMM,OAAO,CAACZ,EAAcE,QAAQD,SAErD,QACE,OAAOS,MCTEG,EAF0BC,YAAYP,G,cCFnD,WAAYQ,GAAgB,IAAD,8BACzB,4CAAMA,KA0BAC,aAAe,SAACC,GAEtB,EAAKC,SAAS,CAAEC,KAAMF,EAAEG,cAAcC,SA7Bb,EAiCnBC,iBAAmB,YAGzBA,EAF6B,EAAKP,MAA1BO,kBACS,EAAKZ,MAAdS,OA/BR,EAAKT,MAAQ,CACXS,KAAM,IALiB,E,sEASV,IACPb,EAAUiB,KAAKR,MAAfT,MACAa,EAASI,KAAKb,MAAdS,KACR,OACE,uBAAKK,MAAO,CAAEC,MAAO,QAASC,OAAQ,WACpC,uCACA,yBAAOvB,KAAK,OAAOkB,MAAOF,EAAMQ,SAAUJ,KAAKP,eAC/C,0BAAQY,QAASL,KAAKD,kBAAtB,YACA,0BACGhB,EAAMuB,KAAI,SAAC5B,EAAM6B,GAAP,OACT,sBAAIC,IAAKD,GAAI7B,Y,GApBI+B,aCavBC,E,2MAUIX,iBAAmB,SAACrB,IAE1BiC,EADoB,EAAKnB,MAAjBmB,SACAjC,I,wEAXmB,IAEnBK,EAAUiB,KAAKR,MAAfT,MACR,OACE,gBAAC,EAAD,CAAeA,MAAOA,EAAOgB,iBAAkBC,KAAKD,uB,GAL9BU,aAoCbG,eAlBS,SAACzB,GAEvB,MAAO,CACLJ,MAFoBI,EAAdD,UAEWH,UAKM,SAAC8B,GAC1B,MAAO,CACLF,QAAS,SAACjC,GACRmC,EAASrC,EAAkBC,cAAcC,QAOhCkC,CAGbF,GChDaI,E,iLARX,OACE,gBAAC,IAAD,CAAUxB,MAAOA,GACf,gBAAC,EAAD,W,GAJUmB,aCMEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cc477b66.chunk.js","sourcesContent":["import { Action } from 'redux'; // reduxで定義されているAction interfaceだけimport\n\n// reduxのActionとして判別するための識別子をenumとして定義\nexport enum TodoActionType {\n  ADD_TODO = 'ADD_TODO'\n}\n\n// Todoを追加するActionとして、Actionを継承したinterfaceを定義\n// 追加するPayloadの情報も同時に持つ\nexport interface IAddTodoAction extends Action {\n  type: TodoActionType.ADD_TODO;\n  payload: {\n    todo: string;\n  };\n}\n\n// Actionを表現したinterfaceを一つの型として取り扱うためにTodoAction型を定義\nexport type TodoAction = IAddTodoAction;\n\n// 定義したActionのinterfaceを作成するCreatorのinterfaceを定義\nexport interface ITodoActionCreator {\n  addTodoAction(todo: string): IAddTodoAction;\n}\n\n// 定義したCreatorの実装を定義(exportをつけてないので外からは見えない)\nclass TodoActionCreator implements ITodoActionCreator {\n  public addTodoAction = (todo: string): IAddTodoAction => {\n    return {\n      payload: {\n        todo\n      },\n      type: TodoActionType.ADD_TODO\n    };\n  };\n}\n\n// Creatorのインスタンスを作成\nexport const todoActionCreator: ITodoActionCreator = new TodoActionCreator();\n","import { combineReducers, Reducer } from 'redux';\n\nimport { IAddTodoAction, TodoAction, TodoActionType } from './action';\nimport { IRootState, ITodoState } from './store';\n\n// ITodoStateの初期データを作成\nconst initTodoState: ITodoState = {\n  todos: []\n};\n\n// Todoで発生するactionに対応してReduxのstateを返すReducerを作成\nconst todoReducer: Reducer<ITodoState, TodoAction> = (\n  state: ITodoState = initTodoState,\n  action: TodoAction\n): ITodoState => {\n  // 関数の引数として渡されてきたactionのtypeを見てReduxのstateを返す\n  switch (action.type) {\n    case TodoActionType.ADD_TODO:\n      // ADD_TODOの場合はactionのpayloadに新しいtodoが詰められているので\n      // それを取り出してtodosに追加して新しいstateとして返す\n      const addTodoAction: IAddTodoAction = action;\n      return {\n        ...state,\n        todos: state.todos.concat([addTodoAction.payload.todo])\n      };\n    default:\n      return state;\n  }\n};\n\n// 全てを集約したReducerを作成\nconst reducer: Reducer<IRootState> = combineReducers({\n  todoState: todoReducer\n});\n\nexport default reducer;\n","import { Action, createStore, Store } from 'redux';\n\nimport reducer from './reducer';\n\n// Storeが持つTodoにの状態を定義\nexport interface ITodoState {\n  todos: string[];\n}\n\n// 全てのStateを集約したStateを定義\nexport interface IRootState {\n  todoState: ITodoState;\n}\n\n// importしたreducerを渡してstoreを作成\nconst store: Store<IRootState, Action> = createStore(reducer);\n\nexport default store;\n","import * as React from 'react';\n\ninterface IProps {\n  todos: string[];\n  onClickAddButton: (todo: string) => void;\n}\n\ninterface IState {\n  text: string;\n}\n\n/* tslint:disable:jsx-no-lambda */\nexport default class extends React.Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n\n    // Componentのstateの初期化\n    this.state = {\n      text: ''\n    };\n  }\n\n  public render() {\n    const { todos } = this.props;\n    const { text } = this.state;\n    return (\n      <div style={{ width: '500px', margin: '0 auto' }}>\n        <h1>TODO LIST</h1>\n        <input type=\"text\" value={text} onChange={this.onTextChange} />\n        <button onClick={this.onClickAddButton}>Add Todo</button>\n        <ul>\n          {todos.map((todo, i) => (\n            <li key={i}>{todo}</li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n\n  // テキストが更新されたときのイベント関数\n  private onTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    // text inputに文字が入力されるたびに入力内容をinputに反映させている\n    this.setState({ text: e.currentTarget.value });\n  };\n\n  // ボタンがクリックされたときのイベント関数\n  private onClickAddButton = () => {\n    const { onClickAddButton } = this.props;\n    const { text } = this.state;\n    onClickAddButton(text);\n  };\n}\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Action, Dispatch } from 'redux';\n\nimport { todoActionCreator } from './action';\nimport { IRootState } from './store';\nimport TodoComponent from './TodoComponent';\n\n// ReduxのStoreをReactのContainerのPropsに変換するinterfaceを定義\ninterface IStateToProps {\n  todos: string[];\n}\n\n// ReduxのDispatchをPropsに変換するinterfaceを定義\n// メンバにはどのアクションを実行するのかを定義する\ninterface IDispatchToProps {\n  addTodo: (todo: string) => void;\n}\n\n// IStateToPropsとIDispatchToPropsの複合型を定義\ntype IProps = IStateToProps & IDispatchToProps;\n\n// IPropsを受け取るContainerを定義\n// Stateは持たないので空の定義を渡す\n/* tslint:disable:jsx-no-lambda */\nclass TodoContainer extends React.Component<IProps, {}> {\n  public render(): JSX.Element {\n    // TodoComponentにpropsの値を詰めて返す\n    const { todos } = this.props;\n    return (\n      <TodoComponent todos={todos} onClickAddButton={this.onClickAddButton} />\n    );\n  }\n\n  // TodoComponentにわたすコールバック関数\n  private onClickAddButton = (todo: string): void => {\n    const { addTodo } = this.props;\n    addTodo(todo);\n  };\n}\n\n// Storeが更新されたときに送られてくるStateを受け取り、\n// IStateToPropsに変換して返す関数を定義\nconst mapStateToProps = (state: IRootState): IStateToProps => {\n  const { todoState } = state;\n  return {\n    todos: todoState.todos\n  };\n};\n\n// Dispatchを受け取り、IDispatchToPropsの関数でどのアクションをDispatchするのかを定義する\nconst mapDispatchToProps = (dispatch: Dispatch<Action>): IDispatchToProps => {\n  return {\n    addTodo: (todo: string) => {\n      dispatch(todoActionCreator.addTodoAction(todo));\n    }\n  };\n};\n\n// Storeが更新されたときの挙動が詰められたIStatePropsと、\n// Storeを更新するためのメソッドが詰められたIDispatchToPropsをTodoContainerと繋ぎこむ\nexport default connect<IStateToProps, IDispatchToProps, {}, IRootState>(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoContainer);\n","import * as React from 'react';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport TodoContainer from './TodoContainer';\n\nclass App extends React.Component {\n  public render() {\n    return (\n      <Provider store={store}>\n        <TodoContainer />\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}